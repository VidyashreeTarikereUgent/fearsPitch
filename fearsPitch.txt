Data storage in solid data vaults.
Vidyashree Tarikere, Ruben Taelman


For a long time now, the companies with centralized user data are in charge of both the data and the development of software applications. Only if the data is separated from the software applications, meaning making data independent of application, will open ways for innovative and creative software applications. The problem here is to manage data when they are decentralized. That is, where to store this huge amount of data which is generated every millisecond and how to manage this data synchronously. The answer to these questions is      Sir Tim Berner-Leeâ€™s Solid Project. In this project, every person will have one or more data vaults, called solid pods, where they can store and manage their own data. I have developed a software application, To-Do Solid application, where data and application are independent of each other. 

In this application, I have inspected different ways one can store data in their data vaults, aka solid pods. If person A wants to store each todo item in separate files or if she/he wants to store all the todo items in one single file or she/he wants to store todo items in multiple files, it is done by sparql-update queries. For case 1, whenever a new todo is created, first, a new turtle file is generated and inside which the created todo is inserted. For case 2, all the todos created by the user just go to a fixed place inside the pod. For case 3, the user is asked if he wants to put newly created todos inside an existing file or if she/he wants to create a new file to store the todos. Thus, this satisfies all the possible needs a user might have when he wants to manage the data on solid pods. 

As a researcher, it is always useful to determine what is the optimal way of storing data, especially in a decentralized environment, such that it will provide maximum results when reading and searching these data. Future work will investigate the ways in which a user can store data following certain timestamp, logical relevance, geographic location and priority-wise. 
